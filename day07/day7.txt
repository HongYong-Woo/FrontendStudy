**********2024-08-29**********

1. 함수
    함수란 ? : 문제해결을 위한 논리적인 흐름을 문장으로 구현하고, 
                코드블럭으로 감써서 하나의 실행 단위로 정의한 것
    함수를 사용하는 이유 : 문제 해결을 위해서 로직을 구현하고, 이를 재사용하기 위해서
                            - 함수는 함수 정의에 의해 생성된다.
                                function add(x, y) {
                                    return x + y;
                                }
                                add(2, 5); //function call, invoke
   
    함수 리터럴 : 자바스크립트에서 함수는 객체 타입의 값
    함수 리터럴은 function 키워드, 함수 이름, 매개변수, 함수 몸체(body) 구성된다.
    let func1 = function add(x, y) { return x + y; };   // 함수 리터럴을 변수 func1에 할당하였다.

    *리터럴: 사람이 이해할 수 있는 문자 or 약속기호를 사용하여 값을 생성하는 표기방식
            값을 생성하기 위한 표기법

    1.함수 정의
        - 선언, 표현식, 함수 생성 시점, 함수 호이스팅
        
        function add(x, y) {return x+ y;};  //함수 선언문 정의
        var sub = function (x,y) { return x-y; };   //함수 표현식 정의

        함수 선언문함수 (런타임 이전에 자바 스크립트엔진에 의해 먼저 실행됩니다.)
        => 런타임 이전에 객체 생성
            자바스크립트 엔진은 함수 이름과 동일한 이름의 식별자를 생성하고 생성된 함수 객체를 할당

            함수 선언문이 코드의 끝올처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅이라고 한다.

        함수 표현식 함수는 함수의 생성 시점이 다르다.
        변수에 함수 리터럴이 할당
        런타임에 실행된다.
        REST API 프로젝트에서는 함수 표현식을 이용하여 작업
        let add = function (x, y) {return x + y;}

        - function 생성자 함수
        - 화살표 함수   const add = (x,y) => x+y;


    2. 함수 호출
        - 매개변수 와 인수
        - 인수 확인
        - 매개변수의 최대 개수
        - 반환문
    3. 참조에 의해서 전달되는 값, 상태 변경

    4.**JSON 과 JSON 처리 메서드
        복잡한 객체를 다룰 것이다.
        네트워크를 통해 어딘가로 보내거나, 로깅 목저긍로 객체를 출력해야 하는 상황
        객체를 문자열로 전환하여 처리해야 한다.

          let user = { name : 'Jon', age : 30, company : 'SSGINC' };

        JSON(JavaScript Object Notation) : 값이나 객체를 나타내는 데이터 범용 포맷 (RFC1627)
            -JSON.Stringify 메소드 : 객체를 JSON으로 변환
            -JSON.parse 메소드      : JSON을 객체로 변환

2. 다양한 함수
    - 즉시 실행 함수 : 함수정의와 동시에 호출되는 함수  단 한번만 호출해서 사용한다.
    - 재귀 함수 : 자신을 호출 재귀호출(recursove call)
                  재귀 호출을 수행하는 함수
                  function countDown(number) {
                    for(let i =number ; i >=0 ; i--) { console.log(i);}
                  }
                ==> function countDown(number) { if(number<0) return; 
                                                console.log(number;
                                                countDown(number); )}
    - 중첩 함수
        함수내에서 함수를 정의한 함수를 중첩함수 (nested function, inner function)
        중첩함수는 외부 함수 내부에서만 호출 가능
        function outer() {
            let x =1;
            function inner() {
                let y =2;
                console.log(x+y);
            }
            inner();
        }
    - 콜백 함수
        함수의 매개변수를 통해서 다른 함수의 내부로 전달되는 함수 콜백함수(Callback function)
        매개변수를 통해서 함수의 외부에서 콜백함수를 전달 받은 함수를 Higher-Order-function(HOF)

        콜백함수는 고차함수에 호출되고, 고차함수는 필요에 따라 콜백함수에 인수를 전달 할 수 있다.
        function repeat(n, f) {
            for(let i=0 ; i<n ; i++) {
                f(i);
            }
        }

        let logPrint = function(i) { console.log(i);}

        repeat(5, logPrint);

        let logEvenPrint = function(i) { if(i%2)console.log(i); }


3. 클로저 , 실행 컨텍스트

4. DOM

5. 정규표현

6. 이벤트

7. 비동기 프로그래밍

8. Ajax

9. REST API

10. 프로미스

11. 제너레이터 async / await

12. 에러 처리

*alert()    => 메시지 보여주기 ( 확인창, 모달(modal)) 
 prompt()   => 사용자에게 텍스트를 입력하라는 메시지를 띄우고 :확인 사용자가 입력한 문자열이 반환함 취소 시 null 반환
confirm()   => 사용자가 확인 또는 취소 버튼을 누를때까지 메시지창이 보여지고 확인버튼(true), 취소버튼(false) 를 반환